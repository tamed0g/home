from flask import Flask, request, jsonify
import asyncio
import re

def create_flask_app(yandex_station) -> Flask:
    """Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–∞–≤—ã–∫–∞ –ê–ª–∏—Å—ã"""
    app = Flask(__name__)
    app.config['JSON_AS_ASCII'] = False
    
    @app.route('/', methods=['GET'])
    def home():
        """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
        return jsonify({
            "name": "Smart Home System",
            "station": yandex_station.name,
            "status": "connected" if yandex_station.is_connected else "disconnected",
            "endpoints": {
                "GET /": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                "GET /status": "–°—Ç–∞—Ç—É—Å —Å—Ç–∞–Ω—Ü–∏–∏", 
                "POST /command": "–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É",
                "POST /play": "–í–∫–ª—é—á–∏—Ç—å –º—É–∑—ã–∫—É",
                "POST /stop": "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
                "POST /volume": "–ì—Ä–æ–º–∫–æ—Å—Ç—å",
                "POST /say": "–°–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç",
                "POST /alice": "Webhook –¥–ª—è –Ω–∞–≤—ã–∫–∞ –ê–ª–∏—Å—ã"
            },
            "alice_webhook": "POST /alice - –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –Ω–∞–≤—ã–∫–æ–º –ê–ª–∏—Å—ã"
        })
    
    @app.route('/status', methods=['GET'])
    def get_status():
        """–°—Ç–∞—Ç—É—Å —Å—Ç–∞–Ω—Ü–∏–∏"""
        try:
            status = asyncio.run(yandex_station.get_status())
            return jsonify({"status": "success", "data": status})
        except Exception as e:
            return jsonify({"status": "error", "message": str(e)}), 500
    
    @app.route('/command', methods=['POST'])
    def execute_command():
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É"""
        try:
            data = request.get_json() or {}
            command = data.get('command')
            params = data.get('params', {})
            
            if not command:
                return jsonify({"error": "Command required"}), 400
            
            result = asyncio.run(yandex_station.send_command(command, params))
            return jsonify({"success": True, "result": result})
            
        except Exception as e:
            return jsonify({"error": str(e)}), 500
    
    # üé§ WEBHOOK –î–õ–Ø –ù–ê–í–´–ö–ê –ê–õ–ò–°–´
    @app.route('/alice', methods=['POST'])
    def alice_webhook():
        """Webhook –¥–ª—è –Ω–∞–≤—ã–∫–∞ –ê–ª–∏—Å—ã"""
        try:
            data = request.get_json()
            
            # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ê–ª–∏—Å—ã
            def create_alice_response(text, end_session=False):
                return {
                    "response": {
                        "text": text,
                        "tts": text,
                        "end_session": end_session
                    },
                    "version": "1.0"
                }
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_text = data.get("request", {}).get("original_utterance", "").lower()
            
            # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä –∫–æ–º–∞–Ω–¥
            response_text = "–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É"
            
                       
            if "–≤–∫–ª—é—á–∏ –º—É–∑—ã–∫—É" in user_text or "–≤–∫–ª—é—á–∏—Ç—å –º—É–∑—ã–∫—É" in user_text:
                genre = "–ø–æ–ø—É–ª—è—Ä–Ω–∞—è –º—É–∑—ã–∫–∞"
                if "—Ä–æ–∫" in user_text:
                    genre = "—Ä–æ–∫"
                elif "–¥–∂–∞–∑" in user_text:
                    genre = "–¥–∂–∞–∑"
                elif "–∫–ª–∞—Å—Å–∏–∫–∞" in user_text:
                    genre = "–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –º—É–∑—ã–∫–∞"
                
                result = asyncio.run(yandex_station.send_command('play', {'query': genre}))
                response_text = f"–í–∫–ª—é—á–∞—é {genre}"
            
            elif "–≤—ã–∫–ª—é—á–∏ –º—É–∑—ã–∫—É" in user_text or "—Å—Ç–æ–ø" in user_text:
                result = asyncio.run(yandex_station.send_command('stop'))
                response_text = "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –º—É–∑—ã–∫—É"
            
            elif "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä" in user_text:
                # –ò—â–µ–º —á–∏—Å–ª–æ –≤ –∫–æ–º–∞–Ω–¥–µ
                numbers = re.findall(r'\d+', user_text)
                temp = int(numbers[0]) if numbers else 22
                
                result = asyncio.run(yandex_station.send_command('climate', {'temperature': temp, 'action': 'set_temp'}))
                response_text = f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É {temp} –≥—Ä–∞–¥—É—Å–æ–≤"
            
            elif "–≤—Ä–µ–º—è" in user_text or "—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º—è" in user_text:
                result = asyncio.run(yandex_station.send_command('time'))
                response_text = result.get('speech', '–ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è')
            
                       
            elif "–ø–æ–≥–æ–¥–∞" in user_text:
                result = asyncio.run(yandex_station.send_command('weather'))
                response_text = result.get('speech', '–ü–æ–≥–æ–¥–∞ —Ö–æ—Ä–æ—à–∞—è')
            
            elif "–ø–æ–º–æ—â—å" in user_text or "—á—Ç–æ —É–º–µ–µ—à—å" in user_text:
                response_text = """–Ø —É–º–µ—é —É–ø—Ä–∞–≤–ª—è—Ç—å —É–º–Ω—ã–º –¥–æ–º–æ–º:
                –£–ø—Ä–∞–≤–ª—è—Ç—å –º—É–∑—ã–∫–æ–π,
                –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É,
                –ì–æ–≤–æ—Ä–∏—Ç—å –≤—Ä–µ–º—è –∏ –ø–æ–≥–æ–¥—É.
                –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞–∑–∞—Ç—å: –ø–æ–≥–æ–¥–∞"""
            
            else:
                response_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –°–∫–∞–∂–∏—Ç–µ '–ø–æ–º–æ—â—å' —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —á—Ç–æ —è —É–º–µ—é"
            
            return jsonify(create_alice_response(response_text))
            
        except Exception as e:
            return jsonify(create_alice_response("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"))
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ endpoints
    @app.route('/play', methods=['POST'])
    def play():
        """–í–∫–ª—é—á–∏—Ç—å –º—É–∑—ã–∫—É"""
        try:
            data = request.get_json() or {}
            query = data.get('query', '–º—É–∑—ã–∫–∞')
            result = asyncio.run(yandex_station.send_command('play', {'query': query}))
            return jsonify({"success": True, "result": result})
        except Exception as e:
            return jsonify({"error": str(e)}), 500
    
    @app.route('/stop', methods=['POST'])
    def stop():
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"""
        try:
            result = asyncio.run(yandex_station.send_command('stop'))
            return jsonify({"success": True, "result": result})
        except Exception as e:
            return jsonify({"error": str(e)}), 500
    
    @app.route('/volume', methods=['POST'])
    def volume():
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å"""
        try:
            data = request.get_json() or {}
            level = data.get('level', 50)
            result = asyncio.run(yandex_station.send_command('volume', {'level': level}))
            return jsonify({"success": True, "result": result})
        except Exception as e:
            return jsonify({"error": str(e)}), 500
    
    @app.route('/say', methods=['POST'])
    def say():
        """–°–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç"""
        try:
            data = request.get_json() or {}
            text = data.get('text', '–ü—Ä–∏–≤–µ—Ç!')
            result = asyncio.run(yandex_station.send_command('say', {'text': text}))
            return jsonify({"success": True, "result": result})
        except Exception as e:
            return jsonify({"error": str(e)}), 500
    
    @app.route('/lights', methods=['POST'])
    def lights():
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–µ—Ç–æ–º"""
        try:
            data = request.get_json() or {}
            action = data.get('action', 'toggle')
            room = data.get('room', '–¥–æ–º')
            result = asyncio.run(yandex_station.send_command('lights', {'action': action, 'room': room}))
            return jsonify({"success": True, "result": result})
        except Exception as e:
            return jsonify({"error": str(e)}), 500
    
    return app